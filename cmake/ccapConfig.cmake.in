@PACKAGE_INIT@

# ccap Package Configuration File

include(CMakeFindDependencyMacro)

# Find required dependencies
if(WIN32)
    # No additional dependencies needed on Windows
elseif(APPLE)
    # Find required Apple frameworks
    find_library(FOUNDATION_FRAMEWORK Foundation REQUIRED)
    find_library(AVFOUNDATION_FRAMEWORK AVFoundation REQUIRED)
    find_library(COREVIDEO_FRAMEWORK CoreVideo REQUIRED)
    find_library(COREMEDIA_FRAMEWORK CoreMedia REQUIRED)
    find_library(ACCELERATE_FRAMEWORK Accelerate REQUIRED)
endif()

# Include the target definitions
include("${CMAKE_CURRENT_LIST_DIR}/ccapTargets.cmake")

# For MSVC, ensure proper debug/release library selection
if(WIN32 AND MSVC)
    # CMake will automatically handle the debug suffix when using the imported target
    # The ccapTargets.cmake file generated by install(EXPORT) will handle this automatically
endif()

# Set variables for compatibility
set(CCAP_LIBRARIES ccap::ccap)
set(CCAP_INCLUDE_DIRS "@PACKAGE_CCAP_INSTALL_INCLUDEDIR@")
set(CCAP_FOUND TRUE)

# Check if all required components are available
check_required_components(ccap)

# Print information when found
if(NOT ccap_FIND_QUIETLY)
    message(STATUS "Found ccap: ${CMAKE_CURRENT_LIST_DIR}")
    message(STATUS "  Version: @PROJECT_VERSION@")
    message(STATUS "  Libraries: ${CCAP_LIBRARIES}")
    message(STATUS "  Include dirs: ${CCAP_INCLUDE_DIRS}")
endif()
