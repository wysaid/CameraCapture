{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Load Project",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "-c",
                "( if [[ $(pwd) =~ ^/mnt ]]; then cmd.exe /c \" ( if not exist build (mkdir build ) ) & cd build & cmake .. \"; else mkdir -p build/Debug && pushd build/Debug && cmake ../.. -DCMAKE_BUILD_TYPE=Debug && popd && mkdir -p build/Release && pushd build/Release && cmake ../.. -DCMAKE_BUILD_TYPE=Release; fi )"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "group": "build",
            "problemMatcher": "$gcc",
            "windows": {
                "command": "cmd.exe",
                "args": [
                    "/c",
                    "( if not exist build (mkdir build ) ) & cd build & cmake .. "
                ],
                "options": {
                    "cwd": "${workspaceFolder}"
                },
                "problemMatcher": "$msCompile",
            }
        },
        {
            "label": "Clean Project",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "-c",
                "git clean -fdx build; git clean -fdx examples"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "group": "build",
            "problemMatcher": "$gcc",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    "git clean -fdx build || rmdir /s /q build"
                ],
                "options": {
                    "cwd": "${workspaceFolder}"
                },
                "problemMatcher": "$msCompile",
            }
        },
        {
            "label": "Reload Project",
            "type": "shell",
            "command": "echo",
            "args": [
                "Done!",
            ],
            "group": "build",
            "dependsOn": [
                "Clean Project",
                "Load Project"
            ],
            "dependsOrder": "sequence"
        },
        {
            "label": "Reload Project",
            "type": "shell",
            "command": "echo",
            "args": [
                "Done!",
            ],
            "group": "build",
            "dependsOn": [
                "Clean Project",
                "Load Project"
            ],
            "dependsOrder": "sequence"
        },
        {
            "label": "Build Project (Debug)",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "-c",
                "( if [[ $(pwd) =~ ^/mnt ]]; then cmd.exe /c \" cmake --build build --config Debug --parallel %NUMBER_OF_PROCESSORS% \"; else cmake --build build/Debug --config Debug --parallel $(nproc); fi )"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "group": "build",
            "problemMatcher": "$gcc",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    "(if not exist build (mkdir build && cd build && cmake ..) ) & cmake --build build --parallel %NUMBER_OF_PROCESSORS%"
                ],
                "options": {
                    "cwd": "${workspaceFolder}"
                },
                "problemMatcher": "$msCompile",
            }
        },
        {
            "label": "Build Project (Release)",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "-c",
                "( if [[ $(pwd) =~ ^/mnt ]]; then cmd.exe /c \" cmake --build build --config Release --parallel %NUMBER_OF_PROCESSORS% \"; else cmake --build build/Release --config Release --parallel $(nproc); fi )"
            ],
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "group": "build",
            "problemMatcher": "$gcc",
            "windows": {
                "command": "cmd",
                "args": [
                    "/c",
                    "(if not exist build (mkdir build && cd build && cmake ..) ) & cmake --build build --config Release --parallel %NUMBER_OF_PROCESSORS%"
                ],
                "options": {
                    "cwd": "${workspaceFolder}"
                },
                "problemMatcher": "$msCompile",
            }
        },
        {
            "label": "Load And Build Project (Debug)",
            "type": "shell",
            "command": "echo",
            "args": [
                "Load And Build Project (Debug) - Done",
            ],
            "group": "build",
            "dependsOn": [
                "Load Project",
                "Build Project (Debug)"
            ],
            "dependsOrder": "sequence",
        },
        {
            "label": "Load And Build Project (Release)",
            "type": "shell",
            "command": "echo",
            "args": [
                "Load And Build Project (Release) - Done",
            ],
            "group": "build",
            "dependsOn": [
                "Load Project",
                "Build Project (Release)"
            ],
            "dependsOrder": "sequence",
        },
        {
            "label": "Clear Output Images",
            "type": "shell",
            "command": "git",
            "args": [
                "clean",
                "-fdx",
                "**/*.bmp"
            ],
            "options": {
                "cwd": "${workspaceFolder}/build"
            },
            "group": "build"
        },
        {
            "label": "Load iOS Project (macOS only)",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "-c",
                "(pod install || pod install --repo-update) && echo Xcode workspace: $(find $(pwd) -iname \"*.xcworkspace\")"
            ],
            "options": {
                "cwd": "${workspaceFolder}/examples"
            },
            "group": "build",
            "problemMatcher": "$gcc"
        },
        {
            "label": "Build iOS Project (macOS only)",
            "type": "shell",
            "command": "xcodebuild",
            "args": [
                "build",
                "CODE_SIGN_IDENTITY=\"\"",
                "CODE_SIGNING_REQUIRED=NO",
                "-workspace",
                "ccapDemo.xcworkspace",
                "-scheme",
                "ccapDemo",
                "-configuration",
                "Debug"
            ],
            "options": {
                "cwd": "${workspaceFolder}/examples"
            },
            "group": "build",
            "problemMatcher": "$gcc"
        },
        {
            "label": "Load And Build iOS Project (macOS only)",
            "type": "shell",
            "command": "echo",
            "args": [
                "Done!",
            ],
            "options": {
                "cwd": "${workspaceFolder}/examples"
            },
            "group": "build",
            "problemMatcher": "$gcc",
            "dependsOn": [
                "Load iOS Project (macOS only)",
                "Build iOS Project (macOS only)"
            ],
            "dependsOrder": "sequence"
        },
        {
            "label": "Run Functional Tests",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "run_tests.sh",
                "--functional"
            ],
            "options": {
                "cwd": "${workspaceFolder}/scripts"
            },
            "group": "build",
            "problemMatcher": "$gcc"
        },
        {
            "label": "Run Functional Tests (Fast)",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "run_tests.sh",
                "--functional",
                "--exit-when-failed",
            ],
            "options": {
                "cwd": "${workspaceFolder}/scripts"
            },
            "group": "build",
            "problemMatcher": "$gcc"
        },
        {
            "label": "Run Performance Tests",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "run_tests.sh",
                "--performance"
            ],
            "options": {
                "cwd": "${workspaceFolder}/scripts"
            },
            "group": "build",
            "problemMatcher": "$gcc"
        },
        {
            "label": "Run Shuffle Tests",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "run_tests.sh",
                "--shuffle"
            ],
            "options": {
                "cwd": "${workspaceFolder}/scripts"
            },
            "group": "build",
            "problemMatcher": "$gcc"
        },
        {
            "label": "Run Shuffle Tests (Fast)",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "run_tests.sh",
                "--shuffle",
                "--exit-when-failed"
            ],
            "options": {
                "cwd": "${workspaceFolder}/scripts"
            },
            "group": "build",
            "problemMatcher": "$gcc"
        },
        {
            "label": "Run All Tests",
            "type": "shell",
            "command": "echo",
            "args": [
                "Done!"
            ],
            "options": {
                "cwd": "${workspaceFolder}/scripts"
            },
            "group": "build",
            "problemMatcher": "$gcc",
            "dependsOn": [
                "Run Functional Tests",
                "Run Performance Tests"
            ],
            "dependsOrder": "sequence"
        },
        {
            "label": "Run 0-print_camera (Debug)",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "-c",
                "( if [[ $(pwd) =~ ^/mnt ]]; then ./0-print_camera.exe; else ./0-print_camera; fi )"
            ],
            "options": {
                "cwd": "${workspaceFolder}/build/Debug"
            },
            "group": "build",
            "problemMatcher": "$gcc",
            "dependsOn": [
                "Build Project (Debug)"
            ],
            "windows": {
                "command": ".\\0-print_camera.exe",
                "problemMatcher": "$msCompile",
            }
        },
        {
            "label": "Run 0-print_camera (Release)",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "-c",
                "( if [[ $(pwd) =~ ^/mnt ]]; then ./0-print_camera.exe; else ./0-print_camera; fi )"
            ],
            "options": {
                "cwd": "${workspaceFolder}/build/Release"
            },
            "group": "build",
            "problemMatcher": "$gcc",
            "dependsOn": [
                "Build Project (Release)"
            ],
            "windows": {
                "command": ".\\0-print_camera.exe",
                "problemMatcher": "$msCompile",
            }
        },
        {
            "label": "Run 1-minimal_example (Debug)",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "-c",
                "( if [[ $(pwd) =~ ^/mnt ]]; then ./1-minimal_example.exe; else ./1-minimal_example; fi )"
            ],
            "options": {
                "cwd": "${workspaceFolder}/build/Debug"
            },
            "group": "build",
            "problemMatcher": "$gcc",
            "dependsOn": [
                "Build Project (Debug)"
            ],
            "windows": {
                "command": ".\\1-minimal_example.exe",
                "problemMatcher": "$msCompile",
            }
        },
        {
            "label": "Run 1-minimal_example (Release)",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "-c",
                "( if [[ $(pwd) =~ ^/mnt ]]; then ./1-minimal_example.exe; else ./1-minimal_example; fi )"
            ],
            "options": {
                "cwd": "${workspaceFolder}/build/Release"
            },
            "group": "build",
            "problemMatcher": "$gcc",
            "dependsOn": [
                "Build Project (Release)"
            ],
            "windows": {
                "command": ".\\1-minimal_example.exe",
                "problemMatcher": "$msCompile",
            }
        },
        {
            "label": "Run 2-capture_grab (Debug)",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "-c",
                "( if [[ $(pwd) =~ ^/mnt ]]; then ./2-capture_grab.exe; else ./2-capture_grab; fi )"
            ],
            "options": {
                "cwd": "${workspaceFolder}/build/Debug"
            },
            "group": "build",
            "problemMatcher": "$gcc",
            "dependsOn": [
                "Build Project (Debug)"
            ],
            "windows": {
                "command": ".\\2-capture_grab.exe",
                "problemMatcher": "$msCompile",
            }
        },
        {
            "label": "Run 2-capture_grab (Release)",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "-c",
                "( if [[ $(pwd) =~ ^/mnt ]]; then ./2-capture_grab.exe; else ./2-capture_grab; fi )"
            ],
            "options": {
                "cwd": "${workspaceFolder}/build/Release"
            },
            "group": "build",
            "problemMatcher": "$gcc",
            "dependsOn": [
                "Build Project (Release)"
            ],
            "windows": {
                "command": ".\\2-capture_grab.exe",
                "problemMatcher": "$msCompile",
            }
        },
        {
            "label": "Run 3-capture_callback (Debug)",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "-c",
                "( if [[ $(pwd) =~ ^/mnt ]]; then ./3-capture_callback.exe; else ./3-capture_callback; fi )"
            ],
            "options": {
                "cwd": "${workspaceFolder}/build/Debug"
            },
            "group": "build",
            "problemMatcher": "$gcc",
            "dependsOn": [
                "Build Project (Debug)"
            ],
            "windows": {
                "command": ".\\3-capture_callback.exe",
                "problemMatcher": "$msCompile",
            }
        },
        {
            "label": "Run 3-capture_callback (Release)",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "-c",
                "( if [[ $(pwd) =~ ^/mnt ]]; then ./3-capture_callback.exe; else ./3-capture_callback; fi )"
            ],
            "options": {
                "cwd": "${workspaceFolder}/build/Release"
            },
            "group": "build",
            "problemMatcher": "$gcc",
            "dependsOn": [
                "Build Project (Release)"
            ],
            "windows": {
                "command": ".\\3-capture_callback.exe",
                "problemMatcher": "$msCompile",
            }
        },
        {
            "label": "Run 4-example_with_glfw (Debug)",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "-c",
                "( if [[ $(pwd) =~ ^/mnt ]]; then ./4-example_with_glfw.exe; else ./4-example_with_glfw; fi )"
            ],
            "options": {
                "cwd": "${workspaceFolder}/build/Debug"
            },
            "group": "build",
            "problemMatcher": "$gcc",
            "dependsOn": [
                "Build Project (Debug)"
            ],
            "windows": {
                "command": ".\\4-example_with_glfw.exe",
                "problemMatcher": "$msCompile",
            }
        },
        {
            "label": "Run 4-example_with_glfw (Release)",
            "type": "shell",
            "command": "bash",
            "args": [
                "-l",
                "-c",
                "( if [[ $(pwd) =~ ^/mnt ]]; then ./4-example_with_glfw.exe; else ./4-example_with_glfw; fi )"
            ],
            "options": {
                "cwd": "${workspaceFolder}/build/Release"
            },
            "group": "build",
            "problemMatcher": "$gcc",
            "dependsOn": [
                "Build Project (Release)"
            ],
            "windows": {
                "command": ".\\4-example_with_glfw.exe",
                "problemMatcher": "$msCompile",
            }
        }
    ]
}